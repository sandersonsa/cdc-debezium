apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect # (1)
metadata:
  name: postgres-connect
  namespace: amq-streams
  annotations:
    strimzi.io/use-connector-resources: "true" # (2)
spec:
  replicas: 1 # (3)
  authentication: # (4)
    type: tls
    certificateAndKey:
      certificate: user.crt
      key: user.key
      secretName: amq-connect-user
  bootstrapServers: <AMQ Streams Kafka URL> # (5)
  tls: # (6)
    trustedCertificates:
      - secretName: amq-streams-cluster-ca-cert
        certificate: ca.crt
  config: # (7)
    group.id: postgres-connect-cluster
    offset.storage.topic: postgres-connect-offsets
    config.storage.topic: postgres-connect-configs
    status.storage.topic: postgres-connect-status
    # -1 means it will use the default replication factor configured in the broker
    config.storage.replication.factor: -1    
    offset.storage.replication.factor: -1
    status.storage.replication.factor: -1
    key.converter: io.confluent.connect.protobuf.ProtobufConverter
    key.converter.schema.registry.url: <URL Schema Registry>
    value.converter: io.confluent.connect.protobuf.ProtobufConverter
    value.converter.schema.registry.url: <URL Schema Registry>
    key.converter.schemas.enable: true
    value.converter.schemas.enable: true
  build: # (8)
    output: # (9)
      type: docker
      image: quay.io/namespace/postgres-connect-cluster:latest
      pushSecret: cr-image-pull-push-secret
    plugins: # (10)
      - name: kafka-connect-protobuf-converter
        artifacts:
          - type: jar
            url: https://packages.confluent.io/maven/io/confluent/kafka-connect-protobuf-converter/7.4.0/kafka-connect-protobuf-converter-7.4.0.jar
      - name: debezium-jdbc-connector
        artifacts:
          - type: tgz
            url: https://repo.maven.apache.org/maven2/io/debezium/debezium-connector-jdbc/2.3.0.Final/debezium-connector-jdbc-2.3.0.Final-plugin.tar.gz
  resources: # (12)
    requests:
      cpu: "1"
      memory: 2Gi
    limits:
      cpu: "2"
      memory: 2Gi
  logging: # (13)
    type: inline
    loggers:
      log4j.rootLogger: "INFO"
  template: # (19)
    pod:
      imagePullSecrets:
        - name: cr-image-pull-push-secret



  apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: jdbc-postgres-sink-connector
spec:
  class: io.debezium.connector.jdbc.JdbcSinkConnector
  tasksMax: 1
  topics:
    - postgres
  config:
    connector.class: io.debezium.connector.jdbc.JdbcSinkConnector
    connection.url: jdbc:postgresql://<Postgres URL>:5432/sampledb
    connection.user: postgres
    insert.mode: upsert
    delete.enabled: true
    primary.key.mode: record_key
    primary.key.fields: id
    key.converter: io.confluent.connect.protobuf.ProtobufConverter
    key.converter.schema.registry.url: http://<schema registry URL>:8081
    value.converter: io.confluent.connect.protobuf.ProtobufConverter
    value.converter.schema.registry.url: http://<schema registry URL>:8081
    key.converter.schemas.enable: true
    value.converter.schemas.enable: true




  {
    "name" : "confluent-mysql-source",
    "connector.class": "MySqlSource",
    "kafka.auth.mode": "Your_Kafka_API_Key",
    "kafka.api.key": "<your-kafka-api-key>",
    "kafka.api.secret" : "<your-kafka-api-secret>",
    "topic.prefix" : "mysql_1",
    "connection.host" : "<your-database-endpoint>",
    "connection.port" : "3306",
    "connection.user" : "<your-database-username>",
    "connection.password": "<your-database-password>",
    "ssl.mode": "prefer",
    "db.name": "mysql-test",
    "table.whitelist": "customers",
    "timestamp.column.name": "created_at",
    "output.data.format": "JSON",
    "db.timezone": "UCT",
    "tasks.max" : "2"
}